#!/usr/bin/env python
"""
Utility to launch a python script on SLURM, using CPU or GPU.
Uses configuration information from config.json and supports launching multiple repeats.
Flags can be passed to the script name by appending them at the end as follows
> launcher RESOURCE {--runs} SCRIPT FLAGS
e.g.
> launcher moran-gpu --runs=2 dummy_gpujob.py --steps=10
"""

import argparse
import tempfile
import json
import os
import subprocess as sub
from datetime import date
from pathlib import Path
from uuid import uuid4

from tqdm import tqdm

DEBUG = os.getenv("DEBUG", None) is not None


def slurm_launcher(cmd):
    """
    Create a temp file with the slurm sbatch syntax, launch it and then delete it
    """
    if DEBUG:
        print("\n#### OUTPUT SCRIPT ####")
        print(cmd)
        print()
        return

    with tempfile.NamedTemporaryFile() as f:
        f.write(cmd.encode("utf-8"))
        f.flush()
        sub.call(["sbatch", f"{f.name}"], shell=False)


def make_slurm_script(conf, cmd, rundir):
    """
    Generate the information to be passed to SLURM about the job
    Also take care of setting up the environment
    The python command will be added afterwards
    """
    # The shebang is not needed by slurm, but can be useful if we want to try running the script
    # ourselves.
    shebang = "#!/bin/bash"
    flags = "\n".join(
        f"#SBATCH --{flag}={value}" for flag, value in conf["resources"].items()
    )
    script = f"{shebang}\n{flags}\n\n"
    script += "source ~/.bash_profile\n"  # build the user's environment just as if we spawned a new login shell
    script += f"cd {rundir}\n"  # run in the same directory as the python script, so relative paths work
    script += f"{conf['env']} && {cmd}"  # activate conda env and launch script if successful
    return script


if __name__ == "__main__":

    if DEBUG:
        print(
            "#####################\n" + "##### DEBUG MODE ####\n"
            "#####################\n"
        )

    parser = argparse.ArgumentParser(prog="neurun")
    parser.add_argument("resource")
    parser.add_argument(
        "--runs",
        type=int,
        help="How many repetitions to run.",
        default=1,
    )
    parser.add_argument("entry")
    parser.add_argument("flags", nargs=argparse.REMAINDER)
    args = parser.parse_args()

    # Find config file in the same folder as this launcher script.
    config_file = Path(__file__).parent / "config.json"
    print(args)
    print("File:", args.entry)
    print("Flags:", args.flags)

    ################# VALIDATE INPUT #################
    entry_path = Path(args.entry).resolve()
    assert entry_path.exists(), f"File {args.entry} not found."
    assert config_file.exists(), f"Configuration file ({config_file}) not found."
    with open(config_file, "r") as f:
        available_configs = json.loads(f.read())
    assert (
        args.resource in available_configs.keys()
    ), f"Requested configuration ({args.resource}) not found in config file ({config_file})"

    config = available_configs[args.resource]
    device = config["device"]
    assert device in [
        "cpu",
        "gpu",
    ], f"Wrong device requested: {device} not in [cpu, gpu]"
    ##################################################

    print("Config:\n", json.dumps(config, indent=2, sort_keys=True))

    cmd = f"time python {entry_path} {' '.join(args.flags)}"
    rundir = entry_path.parent
    scripts = [make_slurm_script(config, cmd, rundir) for _ in range(args.runs)]

    for i, script in enumerate(scripts):
        slurm_launcher(script)
