#!/usr/bin/env python
"""
Utility to launch a python script on SLURM, using CPU or GPU.
Uses configuration information from config.json and supports launching multiple repeats.
Flags can be passed to the script name by appending them at the end as follows
> launcher RESOURCE {--runs} SCRIPT FLAGS
e.g.
> launcher moran-gpu --runs=2 dummy_gpujob.py --steps=10
"""

import argparse
import json
import os
import subprocess as sub
import sys
import tempfile
from pathlib import Path
import re

DEBUG = os.getenv("DEBUG", None) is not None


def here():
    # https://stackoverflow.com/a/19800587
    try:
        return Path(os.path.realpath(__file__)).parent
    except NameError:
        return sys.argv[0]


def slurm_launcher(cmd):
    """
    Create a temp file with the slurm sbatch syntax, launch it and then delete it
    """
    if DEBUG:
        print(cmd)
        return

    with tempfile.NamedTemporaryFile() as f:
        f.write(cmd.encode("utf-8"))
        f.flush()
        sub.call(["sbatch", f"{f.name}"], shell=False)


def make_slurm_script(conf, cmd):
    """
    Generate the information to be passed to SLURM about the job
    Also take care of setting up the environment
    The python command will be added afterwards
    """
    shebang = "#!/bin/bash"
    flags = "\n".join(
        f"#SBATCH --{flag}={value}" for flag, value in conf["resources"].items()
    )
    script = f"{shebang}\n{flags}\n\n"
    script += "source ~/.bashrc\n"  # needed to conda activate and stuff
    script += "cd ${SLURM_SUBMIT_DIR}\n"  # sbatch spawns you in the home
    script += f"{conf['env']}\n{cmd}"  # activate conda env and launch script
    return script


if __name__ == "__main__":

    if DEBUG:
        print(
            "#####################\n" + "##### DEBUG MODE ####\n"
            "#####################\n"
        )

    parser = argparse.ArgumentParser(prog="neurun")
    parser.add_argument("resource")
    parser.add_argument(
        "--runs",
        type=int,
        help="How many repetitions to run.",
        default=1,
    )
    parser.add_argument("command", nargs=argparse.REMAINDER)
    args = parser.parse_args()

    config_file = here() / "config.json"
    print(args)
    print("Command:", args.command)

    pat = re.compile("")

    ################ VALIDATE CONFIG ################
    assert config_file.exists(), f"Configuration file ({config_file}) not found."
    with open(config_file, "r") as f:
        available_configs = json.loads(f.read())
    assert (
        args.resource in available_configs.keys()
    ), f"Requested configuration ({args.resource}) not found in config file ({config_file})"

    config = available_configs[args.resource]
    device = config["device"]
    assert device in [
        "cpu",
        "gpu",
    ], f"Wrong device requested: {device} not in [cpu, gpu]"
    ##################################################

    print("Config:\n", json.dumps(config, indent=2, sort_keys=True))

    cmd = " ".join(args.command)

    scripts = [make_slurm_script(config, cmd) for _ in range(args.runs)]

    for i, script in enumerate(scripts):
        slurm_launcher(script)
