#!/usr/bin/env python
"""
Utility to launch a python script on SLURM, using CPU or GPU.
Uses configuration information from config.json and supports launching multiple repeats.
Flags can be passed to the script name by appending them at the end as follows
> launcher RESOURCE {--runs} SCRIPT FLAGS
e.g.
> launcher moran-gpu --runs=2 dummy_gpujob.py --steps=10
"""

import argparse
import json
import os
from tqdm import tqdm
from uuid import uuid4
from datetime import date
import subprocess as sub
from pathlib import Path

DEBUG = os.getenv("DEBUG", None) is not None


def slurm_launcher(cmd, delete=False):
    """
    Create a temp file with the slurm sbatch syntax, launch it and then delete it
    """
    if DEBUG:
        print(cmd)
        return

    day = date.today().strftime("%Y%m%d")
    exp = uuid4().hex[:8]
    name = f"{day}-{exp}.sbatch"

    with open(name, "w") as f:
        f.write(cmd)

    # redirect unwanted output to null
    with open(os.devnull, "w") as FNULL:
        try:
            sub.call(["sbatch", f"{name}"], shell=False, stdout=FNULL)
        except sub.CalledProcessError as e:
            print("ERROR", e)

    if delete:
        # delete the temporary file we passed to sbatch
        sub.call(["rm", f"{name}"], shell=False)


def make_slurm_script(conf, cmd):
    """
    Generate the information to be passed to SLURM about the job
    Also take care of setting up the environment
    The python command will be added afterwards
    """
    shebang = "#!/bin/bash"
    flags = "\n".join(
        f"#SBATCH --{flag}={value}" for flag, value in conf["resources"].items()
    )
    script = f"{shebang}\n{flags}\n\n{conf['env']}\n{cmd}"
    return script


if __name__ == "__main__":

    if DEBUG:
        print(
            "#####################\n" + "##### DEBUG MODE ####\n"
            "#####################\n"
        )

    parser = argparse.ArgumentParser(prog="neurun")
    parser.add_argument("resource")
    parser.add_argument(
        "--runs",
        type=int,
        help="How many repetitions to run.",
        default=1,
    )
    parser.add_argument("entry")
    parser.add_argument("flags", nargs=argparse.REMAINDER)
    args = parser.parse_args()

    config_file = "config.json"
    print(args)
    print("File:", args.entry)
    print("Flags:", args.flags)

    ################# VALIDATE INPUT #################
    assert Path(args.entry).exists(), f"File {args.entry} not found."
    assert Path(config_file).exists(), f"Configuration file ({config_file}) not found."
    with open(config_file, "r") as f:
        available_configs = json.loads(f.read())
    assert (
        args.resource in available_configs.keys()
    ), f"Requested configuration ({args.resource}) not found in config file ({config_file})"

    config = available_configs[args.resource]
    device = config["device"]
    assert device in [
        "cpu",
        "gpu",
    ], f"Wrong device requested: {device} not in [cpu, gpu]"
    ##################################################

    print("Config:\n", json.dumps(config, indent=2, sort_keys=True))

    cmd = f"python {args.entry} {' '.join(args.flags)}"

    scripts = [make_slurm_script(config, cmd) for _ in range(args.runs)]

    for i, script in enumerate(scripts):
        slurm_launcher(script)
