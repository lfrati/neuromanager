#!/usr/bin/env python
"""
Utility to launch a python script on CPU or GPU.
Uses configuration information from config.json and supports launching multiple repeats.
Flags can be passed to the script name by appending them at the end as follows
> local {--runs | --addr | --port} SCRIPT FLAGS
e.g.
> local --runs=2 dummy_gpujob.py --steps=10
"""

import argparse
import json
import os
from uuid import uuid4
from datetime import date
import subprocess as sub
from pathlib import Path
from SNURM_utils import POST_req, GET_req, status

DEBUG = os.getenv("DEBUG", None) is not None


if __name__ == "__main__":

    if DEBUG:
        print(
            "#####################\n" + "##### DEBUG MODE ####\n"
            "#####################\n"
        )

    parser = argparse.ArgumentParser(prog="local")
    parser.add_argument("--addr", default="localhost")
    parser.add_argument("--port", default=12345)
    parser.add_argument(
        "--runs",
        type=int,
        help="How many repetitions to run.",
        default=1,
    )
    parser.add_argument("--env", default="")
    parser.add_argument("cmd")
    args = parser.parse_args()

    print(args)

    path = Path().resolve().as_posix()

    for command in range(args.runs):
        print()
        if DEBUG:
            print(args.cmd)
        else:
            msg = POST_req(
                {"action": "add", "cmd": args.cmd, "path": path, "env": args.env},
                args.addr,
                args.port,
            )
            info = msg["result"]
            print(f"[{info['cmd']}] ID:{info['id']} STATE:{info['state']}")

    msg = GET_req("", args.addr, args.port)
    jobs = msg["result"]
    status(jobs)
